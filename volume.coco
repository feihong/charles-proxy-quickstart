# The logic here assumes that a series title has no spaces in it
from pathlib import Path
import json
import os
import re
import zipfile
import tempfile

input_dir = Path(os.getcwd())
comic_title = 'Unknown'

def get_cbz_files():
  # get cbz files sorted by modification time
  for file in input_dir.glob('*.cbz') |> sorted$(key=p -> p.stat().st_mtime_ns):
    title = file.stem.split(' ')[0]

    # skip volume cbz files
    if re.search(r'第\w+卷', file.stem):
      continue
    else:
      global comic_title
      comic_title = title
      yield file

def get_meta_and_images(cbz_file):
  with zipfile.ZipFile(cbz_file, 'r') as zf:
    yield ('meta', zf.read('meta.json') |> json.loads)

    for name in sorted(zf.namelist()):
      if name.endswith('.jpg'):
        yield ('image', zf.read(name))

def get_files():
  image_count = 0
  chapter_metas = []

  for type_, data_ in get_cbz_files() |> map$(get_meta_and_images) |> flatten:
    case type_:
      match 'meta':
        chapter_metas.append((image_count+1, data_))
      match 'image':
        image_count += 1
        yield (f'{image_count:03}.jpg', data_)

  yield ('meta.json', json.dumps(chapter_metas, ensure_ascii=False))
  yield image_count

with tempfile.TemporaryFile() as tf:
  image_count = 0
  with zipfile.ZipFile(tf, 'w') as zf:
    for item in get_files():
      case item:
        match img_count if isinstance(img_count, int):
          image_count = img_count
        match (filename, data_):
          zf.writestr(filename, data_, compress_type=zipfile.ZIP_STORED)

  tf.seek(0)
  output_file = input_dir / f'{comic_title} 第xxx卷 ({image_count}).cbz'
  output_file.write_bytes(tf.read())
  print(f'Wrote {image_count} images to {output_file}')
